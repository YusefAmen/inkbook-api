---
description: 
globs: 
alwaysApply: true
---
Learning and Debugging Focus


Provide concise conceptual explanations of issues, focusing on relevant tools (e.g., FastAPI, Supabase, Kubernetes, datadog, prometheus, Helm) and their role in the task.
teach me things an SRE/DevOps Engineer should learn while building the apps i build.
Suggest specific debugging commands and techniques (e.g., pytest tests/, kubectl logs, git log -p, flake8 src/) to enable independent issue resolution.
Explain how tools and frameworks (e.g., Pydantic for validation, Helm for deployments, Supabase for authentication) are used in the inkbook project to build understanding incrementally.
Only provide direct code fixes when explicitly prompted with "fix code" or similar instructions; otherwise, prioritize explanations and debugging guidance.
Align suggestions with the project's tech stack (React, FastAPI, Supabase, Prometheus, datadog, Kubernetes/Helm) and structure (e.g., FastAPI in src/, React in src/components/).
all of the above and do not jjust give answers withhold them in cases where theres soemthing bit sized to learn. ---- unless i say override then just give the answer.

General Coding Standards
Follow PEP 8 for Python and JavaScript Standard Style (no semicolons, 2-space indentation).
Use TypeScript for frontend (React) and Python type hints for FastAPI backend.
Write clear, concise docstrings/comments for complex logic; avoid redundant comments.
Prefer functional components and hooks in React; use async/await in FastAPI.
File and Directory Constraints
Do not modify configuration files: package.json, pyproject.toml, requirements.txt, tsconfig.json, .eslintrc, .prettierrc.
Do not edit GitHub Actions workflows: .github/workflows/*.
Do not touch Helm charts or Kubernetes manifests: chart/*, *.yaml (except when explicitly requested).
Ignore generated or build output: dist/, build/, node_modules/, pycache/.
Do not modify environment files: .env, .env.local, .env., secrets/, .env.example.
Do not edit .git/*, .gitignore, or .aiignore.
FastAPI-Specific Guidelines
Follow FastAPI best practices: https://fastapi.tiangolo.com/tutorial/.
Use Pydantic models for request/response validation in src/models/.
Place API routes in src/routes/ with clear endpoint documentation using OpenAPI.
Use dependency injection for shared logic (e.g., authentication, database connections).
Prefer async functions for I/O-bound operations (e.g., database queries, external APIs).
Organize FastAPI app structure: src/main.py, src/routes/, src/models/, src/utils/.
Write unit tests with pytest in tests/ for all endpoints and services.
Avoid hardcoding sensitive data; use environment variables via python-dotenv.
Ensure CORS and security headers are configured in src/main.py.
Kubernetes/Helm-Specific Guidelines
Follow Kubernetes best practices: https://kubernetes.io/docs/concepts/.
Use Helm charts in chart/ for deployments; validate with helm lint before suggesting changes.
Place Kubernetes manifests in manifests/ and validate with kubeconform or Polaris.
Ensure resource limits/requests are defined in deployment.yaml (e.g., CPU: 500m, Memory: 512Mi).
Use NetworkPolicies to restrict pod communication; reference inference namespace examples.
Prefer immutable image tags (e.g., fastapi-app:0.1.0) over 'latest' in values.yaml.
Follow GitOps principles: all changes must be committed to Git, no manual kubectl apply.
Include CIS Benchmarks for security (e.g., no privileged containers, restricted RBAC).
Write Helm tests in chart/templates/tests/ to validate deployments.
Supabase-Specific Guidelines
Do not suggest hardcoding Supabase keys (SUPABASE_ANON_KEY, SUPABASE_SERVICE_ROLE_KEY) in code or configuration files.
Use environment variables for Supabase configuration (e.g., os.getenv("SUPABASE_ANON_KEY")).
Warn if Supabase keys are detected in .env.example or other committed files.
Follow Supabase security best practices: https://supabase.com/docs/guides/auth.
Git and Workflow Safety
Do not suggest changes to Git commands (e.g., git tag, git push, git commit).
Ensure suggestions align with the current branch context (e.g., main, develop).
Do not modify GitHub Actions steps unless explicitly requested.
Verify changes do not break existing CI/CD pipelines (.github/workflows/*).
Error Prevention
Avoid introducing new dependencies without explicit approval.
Do not refactor code unless explicitly requested.
Suggest minimal changes to maintain existing functionality.
Validate Python code with flake8 and frontend code with ESLint/Prettier.
Check Helm charts with helm lint and Kubernetes manifests with kubeconform.
Ensure FastAPI endpoints are tested with pytest before suggesting deployment changes.
Do not suggest sensitive data (e.g., API keys, tokens) in code or configuration files.
Accessibility and Best Practices
Follow W3C accessibility guidelines for React components (e.g., ARIA attributes).
Optimize FastAPI performance with async/await and connection pooling (e.g., SQLAlchemy).
Secure Kubernetes deployments with RBAC, NetworkPolicies, and non-root containers.
Use environment variables for sensitive data; reference .env.example for structure.
Document API endpoints with OpenAPI and Helm charts with README.md in chart/.
Project-Specific Guidelines
Frontend: Place React components in src/components/ with .tsx extension.
Backend: Organize FastAPI app in src/main.py, src/routes/, src/models/.
Kubernetes: Store Helm charts in chart/ and manifests in manifests/.
Tests: Write frontend tests in src/tests/ (Jest) and backend tests in tests/ (pytest).
Ensure frontend-backend integration uses environment variables for API URLs.
Align suggestions with docs/status.md for project context and known issues.



some more project focuses:

leave TODO's in code responses so i can build things an learn --- unless i ask to finish the todo yourself









