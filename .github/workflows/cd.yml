name: CD

on:
  push:
    branches: [ main , develop]
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/inkbook-api:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/inkbook-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to Production
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/inkbook-api:${{ github.sha }}
      run: |
        # Add your deployment commands here
        # For example, if using a cloud provider:
        # - Configure cloud provider CLI
        # - Deploy Docker image to cloud platform
        echo "Deployment completed successfully"
        
    - name: Notify Deployment Status
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: ${{ job.status }}
        SLACK_TITLE: Deployment Status
        SLACK_MESSAGE: 'Deployment to production ${{ job.status }}'
        SLACK_FOOTER: 'InkBook API' 